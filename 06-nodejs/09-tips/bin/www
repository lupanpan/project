#!/usr/bin/env node

/**
 * Module dependencies.
 */

let app = require('../app')
let config = require('../config/serverConfig')
let debug = require('debug')('my:sever')
let http = require('http')

/**
 * Get port from environment and store in Express.
 * 从环境变量获取端口号
 */
// var port = normalizePort(process.env.PORT || '3000')
// app.set('port', port)

/**
 * Create HTTP server.
 * 创建 HTTP 服务
 */
var server = http.createServer(app.callback())

/**
 * Listen on provided port, on all network interfaces.
 * 监听端口号
 */
server.listen(config.port || 3000)
server.on('error', onError)
server.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false.
 * 将端口规范化为数字、字符串或false
 */
function normalizePort(val) {
    var port = parseInt(val, 10)

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port
    }

    return false
}

/**
 * Event listener for HTTP server "error" event.
 * 监听 HTTP 服务的错误事件
 */
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port

    // handle specific listen errors with friendly messages
    // 处理错误消息
    switch(error.code) {
        case 'EACCES': // 无存取权限、文件或路径名中包含的目录不可访问
            console.error(bind + ' requires elevated privileges')
            process.exit(1)
            break
        case 'EADDRINUSE': // 给定的地址已经被使用
            console.error(bind + ' is already in use')
            process.exit(1)
            break
        default:
            throw error
    }
}

/**
 * Event listener for HTTP server "listening" event.
 * 监听 HTTP 服务的 listening 事件
 */
function onListening() {
    var addr = server.address()
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port
    debug('Listening on ' + bind)
}